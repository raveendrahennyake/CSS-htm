const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql2');
const app = express();

// Middleware to parse JSON bodies
app.use(bodyParser.json());

const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'shop'
});

connection.connect((err) => {
    if (err) {
        console.log(err,"HELLO");
    } else {
        console.log("Connected to the database");
    }
});

//get api
app.get('/api/books', (request, response) => {
    connection.query("SELECT * FROM book", (err, result) => {
        if (err) {
            console.log(err);
            response.status(500).send('An error occurred');
        } else {
            response.json(result);
        }
    });
});

app.get('/api/book/:Is_bn', (request, response) => {
    const bookid = request.params.Is_bn;
    const query = "SELECT * FROM book WHERE Is_bn = ?";

    connection.query(query, [bookid], (err, result) => {
        if (err) {
            console.log(err);
            response.status(500).send('An error occurred');
        } else {
            response.json(result);
        }
    });
});

//post book
app.post('/api/addbooks', (request, response) => {
    const details = {
        tilte: request.body.tilte,
        description: request.body.description
    };

    const query = "INSERT INTO book SET ?";

    connection.query(query, details, (err, result) => {
        if (err) {
            console.error("Error inserting book:", err);
            response.status(500).send({
                status: false,
                message: "Book insert failed",
                error: err.message
            });
        } else {
            console.log("Book inserted successfully:", result);
            response.send({
                status: true,
                message: "Book inserted correctly",
                data: result
            });
        }
    });
});

//Author part
app.get('/api/authors',(request,response)=>{
    connection.query("SELECT * FROM author",(err,result)=>{
        if(err){
            response.status(500).send("An error occurred");
        }

        else {
            response.json(result);
        }
    })
})

app.get('/api/author/:author_id',(request,response)=>{
    const authorid=request.params.author_id;
    const query="SELECT * FROM author WHERE author_id=?";
    connection.query(query,[authorid],(err,result)=>{
        if(err){
            response.status(500).send("An error occurred")
        }
        else {
            response.json(result);
        }
    })
})

const port = process.env.PORT || 3000;
app.listen(port, (err) => {
    if (err) {
        console.log(err);
    } else {
        console.log(`Server is running on port ${port}`);
    }
});


//put method 


app.put('/api/updateAuthor/:author_id', (req, res) => {
    const { author_id } = req.params;
    const { name, description } = req.body;

    const query = "UPDATE author SET name = ?, description = ? WHERE author_id = ?";

    connection.query(query, [name, description, author_id], (err, result) => {
        if (err) {
            res.send({
                status: false,
                message: "Your update has failed",
            });
        } else {
            res.send({
                status: true,
                message: "Update is successful",
                data: result
            });
        }
    });
});
app.delete('/api/delectAuthor/:author_id',(request,response)=>{
    const author_id=request.params.author_id;
    const query="DELETE  FROM author WHERE author_id=?"

    connection.query(query,author_id,(err,result)=>{
        if(err){
            response.status(500).send({
                status:false,
                message:'Your Delect is Failed',
            })
        }
        else {
            response.send({
                status:true,
                message:"your Author Is Delect",
                data:result

            })
        }

    })

})


//Author part
app.get('/api/authors',(request,response)=>{
    connection.query("SELECT * FROM author",(err,result)=>{
        if(err){
            response.status(500).send("An error occurred");
        }

        else {
            response.json(result);
        }
    })
})
