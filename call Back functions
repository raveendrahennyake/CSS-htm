chooes1///


function function1 () {
  consoele.log("Hello1");
  
}

function function2 () {
  console.log("Hello");
  
}

function1(function2());  ////// 1 step

//use call back function
function function1 (callback) {
  consoele.log("Hello1");
  callback();
}
function function2 () {
  console.log("Hello");
}



function1(function2);

/// another type of callback function use

function function4 (callback,a,b) {
    let x=a+b
    callback(x);
  
}
function function5 (x) {
    console.log(x)
}
function4(function5,8,8);

//html is(<h1 id="para"</h1>
function display (x) {
    const input=document.getElementById("para");
    input.textContent=x;

}

function4(display,8,8);



//map finction and foreach loop


map function and foreach loop main difference is map function is have return type and map function return to new array but foreach loop have npt return method 


let arrys=[10,88,99,66,55];

//forEach loops
let conos=arrys.forEach(getname);

function getname (elements) {
    elements=elements+10;
    console.log(elements);

}

console.log(conos);/// underfind

//map methods

let newconons=arrys.map(getname2)

function getname2 (elements) {

   return elements+=20;
    // console.log(elements);
}
 console.log(newconons); //
[30, 108, 119, 86, 75]



//use Filter methods

 let mydatails=[55,22,33,6644,85,47];
 const mynewnumbers=mydatails.filter(function6);
 function function6 (elements) {
   let numberss=elements%2==0;
    return numberss;
 }
 console.log(mynewnumbers);

//2
const mynewguess=mydatails.filter((elements)=>{
    const output=elements%2==0;
    return output;

})
console.log(mynewguess);

//Foreach/map/filter/reduce methods

reduce methods
let first=[77,88,99,55,11,33];
const datass=first.reduce((accmulater,elements)=>{
     return accmulater+elements;
//    return elements=elements+elements+1

})
console.log(datass);

use Arrow Functions

let newdata=[77,88,99,66,33,22];

const Array1=newdata.map((elements)=>{
    elements=elements*2
    return elements;
})

console.log(Array1);

const Array2=newdata.filter((elements)=>{
      return elements%2===0;
    
})

console.log(Array2);





